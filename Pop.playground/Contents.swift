
import UIKit

////////////////////////////////////////////////////////////////////////////////
// CLASSES
////////////////////////////////////////////////////////////////////////////////
//class Insect {
//    var numLegs: Int
//    init(numLegs: Int) {
//        self.numLegs = numLegs
//    }
//    func walk() {
//        print("moving \(numLegs) legs")
//    }
//}
//
// TODO: create an instance of Insect
// TODO: create variable and constant
// TODO: pass by reference


////////////////////////////////////////////////////////////////////////////////
// STRUCTS
////////////////////////////////////////////////////////////////////////////////
//struct Insect {
//    var numLegs: Int
//    func walk() {
//        print("moving \(numLegs) legs")
//    }
//}
//
// TODO: create an instance of Insect
// TODO: create variable and constant
// TODO: pass by value


////////////////////////////////////////////////////////////////////////////////
// PROTOCOLS
////////////////////////////////////////////////////////////////////////////////
//protocol Insect {
//    var numLegs: Int { get }
//    init(numLegs: Int)
//    func walk()
//}
//
// TODO: create an instance of Insect
// TODO: create method with Insect as method parameter


////////////////////////////////////////////////////////////////////////////////
// CLASS INHERITANCE
////////////////////////////////////////////////////////////////////////////////
//class Insect {
//    func walk() {
//        print("walking")
//    }
//}
//
//class Beetle: Insect {
//}
//
// TODO: override walk
// TODO: pass insect to function


////////////////////////////////////////////////////////////////////////////////
// STRUCT INHERITANCE
////////////////////////////////////////////////////////////////////////////////
//struct Insect {
//    func walk() {
//        print("walking")
//    }
//}
//
//struct Beetle: Insect {
//}
//
// TODO: try to compile


////////////////////////////////////////////////////////////////////////////////
// PROTOCOL CONFORMANCE + EXTENSIONS
////////////////////////////////////////////////////////////////////////////////
//protocol Insect {
//    func walk()
//}
//
//struct Beetle: Insect {
//}
//
// TODO: make beetle conform to insect protocol
// TODO: implement protocol extension
// TODO: override walk


////////////////////////////////////////////////////////////////////////////////
// GOD OBJECTS
////////////////////////////////////////////////////////////////////////////////
//class Insect {
//    func walk() {
//        print("walking")
//    }
//}
//
//class Beetle: Insect {
//}
//
//class Butterfly: Insect {
//}

// TODO: make butterfly fly instead of walk
// TODO: introduce grasshopper
// TODO: make grasshopper jump and fly
// TODO: make beetle jump


////////////////////////////////////////////////////////////////////////////////
// MULTIPLE INHERITANCE
////////////////////////////////////////////////////////////////////////////////
//class WalkingInsect {
//    func walk() {
//        print("walkling")
//    }
//}
//
//class JumpingInsect {
//    func jump() {
//        print("jumping")
//    }
//}
//
//class FlyingInsect {
//    func fly() {
//        print("flying")
//    }
//}
//
//class Beetle: WalkingInsect {
//}
//
//class Grasshopper: JumpingInsect {
//}
//
//class Butterfly: FlyingInsect {
//}

// TODO: make grasshopper fly

////////////////////////////////////////////////////////////////////////////////
// PROTOCOL ORIENTED PROGRAMMING
////////////////////////////////////////////////////////////////////////////////
//protocol Walker {
//    func walk()
//}
//
//protocol Jumper {
//    func jump()
//}
//
//protocol Flyer {
//    func fly()
//}
//
//struct Beetle: Walker {
//}
//
//struct Grasshopper: Jumper, Flyer {
//}
//
//struct Butterfly: Flyer {
//}
//
// TODO: implement protocol extensions
// TODO: make grasshopper jump and fly
// TODO: introduce multiped protocol and decorate types with multiped
// TODO: non-insects

////////////////////////////////////////////////////////////////////////////////
// EXAMPLES IN SWIFT
////////////////////////////////////////////////////////////////////////////////
//struct Human {
//    var name: String
//}

// TODO: decorate with CustomStringConvertible
// TODO: decorate with Equatable
// TODO: decorate with Comparable
// TODO: sort and print array

